Allow password
> sudo vim /etc/ssh/sshd_config

***** Create user in Ubuntu *****
>    adduser monica

- Include password: XXXXX | fastapi

Add new user to sudo/root access
>    usermod -aG sudo monica 
>    sudo systemctl restart ssh
    
login with new user
>    sudo apt upgrade


***** Return actual user logged *****
>   whoami

***** Displays all the environment variables *****  
>   printenv

***** To remove some env variable *****
>   unset [variable]

***** Get all the workers pid from gunicorn *****
ps -aef | grep -i gunicorn

***** Install new app on Ubuntu *****
- python3, alembic, postgresql

1. Update env
>   sudo apt update -y

2. Postgres: 
All the users installed on the machine to confirm postgres user
>   sudo cat /etc/passwd

If exists:
>   su -i -u postgres or su - postgres

For this use the peer  authentication
>   psql -U postgres

By default user postgres can be added review su - postgres
> Add password with:     \password postgres     (as example pwd:root)

Add to connect remotely postgres files: /etc/postgresql/12/main/postgresql.conf
>   listen_addresses = 'IP Address or *'



Change connections access in file (replication is not neccesary): pg_hba.conf
```     change peer to md5
        change local connection to all access:  127.0.0.1/32 to 0.0.0.0/0
                                      and  ::1/128     to  ::/0
```
>   systemctl daemon-reload
>   systemctl restart postgresql

* ? Extra step: create new user and add sudo access

3. App config:

Create folder on Home Dir:
>   mkdir app
>   cd app

Create a virtual env:
>   virtualenv venv
>   source venv/bin/activate
>   deactivate  #To deactivate venv

Create folder for app:
>   mkdir src
>   cd src

Clone in this specific dir only the docs
>   git clone repo .

Install all in requirements.txt - Retry to install if some errors after install
>   pip3.9 install -r requirements.txt

If you need to install extra libs deactivate venv and reactivate venv
>   sudo apt install libpq-dev #install default python
>   sudo apt install python3-dev libpq-dev      #Also can be used
>   pip3 install psycopg2
>   source venv/bin/activate
>   python3.9 -m uvicorn app.main:app / uvicorn app.main:app no working in old environments/multiple python

Environment variables: Create .env on Home dir (out of app dir to be secure)
>   touch .env
Add inside the .env (you are able to change values)
```
DATABASE_HOSTNAME=[localhost]
DATABASE_PORT=[5432 by default]
DATABASE_PASSWORD=[password]
DATABASE_NAME=[db_name]
DATABASE_USERNAME=[postgres_username]
SECRET_KEY=[REview type of key]
ALGORITHM=[review]
ACCESS_TOKEN_EXPIRE_MINUTES=XX
```
Add command in the profile file to export all, reboot and verify changes:
>   vi ~/.profile
>   set -o allexport; source HOME_PATH/.env; set +o allexport
>   sudo reboot
>   printenv

4. Create / Migrate DB with Alembic
>   cd /src
>   alembic upgrade head

5. Run app:
Install gunicorn and uvloop for prod env
>   pip3.9 install gunicorn
>   pip3.9 install httptools
>   pip3.9 install uvloop
>   pip3 install "uvicorn[standard]" gunicorn
>   gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000
Create service to run in system, review the Path in file and change:    
>   cd /etc/systemd/system/
>   sudo vi gunicorn.service
```
[Unit]
Description=demo fastapi application
After=network.target

[Service]
User=fastapi/usercreated
Group=fastapi/user created
WorkingDirectory=/home/[User]/app/src/
Environment="PATH=/home/[User]/app/venv/bin"
EnvironmentFile=/home/[User]/.env
ExecStart=/home/[User]/app/venv/bin/gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app --bind 0.0.0.0:8000

[Install]
WantedBy=multi-user.target
```
Run 
>   systemctl start api  
>   systemctl status api
>   systemctl daemon-reload
>   systemctl restart api
>   sudo systemctl enable api       # *Enable automatic reboot after env restart

6. Update git repo Requirements with new pip3.9 freeze

7. For test purposes
>   uvicorn --host 0.0.0.0 app.main:app


8. Add proxy, can handle SSL termination / HTTPS request
First install and configure nginx
>   sudo apt install nginx -y
>   cd /etc/nginx/sites-available
>   sudo vi default
```
server {
        listen 80;
        listen [::]:80;

        server_name _;  #replace with specific domain name

        location / {
                proxy_pass http://localhost:8000;
                proxy_http_version 1.1;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $http_host;
                proxy_set_header X-NginX-Proxy true;
                proxy_redirect off;
        }
}
```
>   sudo systemctl restart nginx

Review if nginx is enable to restart reboot
>   sudo systemctl enable nginx
>   sudo systemctl restart nginx

Verify the IP displays by default the API, hello world 

Second: Get domain name
- Namecheap, godaddy, aws, porkbun, netlify...
- Add the domain to the platform: Review docs
- domain.xyz returns now value


9. Create SSL Certificate using Certbot
>   sudo snap install --classic certbot

You can select to certbot to configure nginx automatically
>   sudo certbot --nginx
>   Y N Domain_name wwww.Domain_name

Review the changes made on nginx proxy-reverse
>   vi /etc/nginx/sites-available/default


10. Set a firewall
Review firewall ufw is inactive
>   sudo ufw status
>   sudo ufw allow http
>   sudo ufw allow https
>   sudo ufw allow ssh
>   sudo ufw allow 5432 # Only if it's necessary alow postgresql
>   sudo uwf enable -y
Verify status firewall ufw
>   sudo ufw status
Delete firewall ufw
>   sudo ufw delete allow 5432


11. Add docker-compose-prod.yml
>   docker-compose -f docker-compose-prod.yml up -d

